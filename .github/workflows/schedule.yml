name: ETF Strategy Scheduler

on:
  schedule:
    # 每个交易日 9:35 推送新股信息 (北京时间 UTC+8)
    - cron: '35 1 * * 1-5'  # UTC 1:35 = 北京时间 9:35
    
    # 每个交易日 13:40 推送策略信号
    - cron: '40 5 * * 1-5'  # UTC 5:40 = 北京时间 13:40
    
    # 每周五 16:00 更新股票池
    - cron: '0 8 * * 5'  # UTC 8:00 = 北京时间 16:00
    
    # 每个交易日 15:30 爬取日线数据
    - cron: '30 7 * * 1-5'  # UTC 7:30 = 北京时间 15:30
    
    # 盘中数据爬取 (每30分钟)
    - cron: '35 1-6/1 * * 1-5'  # UTC 时间 = 北京时间 -8
    
    # 每天 00:00 清理旧数据
    - cron: '0 16 * * *'  # UTC 16:00 = 北京时间 00:00

  workflow_dispatch:
    inputs:
      task:
        description: '选择要执行的任务'
        required: true
        type: choice
        options:
          - 'test_message'              #【T01】手动推送微信消息
          - 'test_new_stock'            #【T07】手动推送新股信息
          - 'test_new_stock_listings'   # 新增【T08】手动套利扫描
          - 'test_stock_pool'           #【T04】手动推送当前股票池
          - 'test_execute'               #【T05】手动执行策略并推送结果
          - 'test_reset'                 #【T06】手动重置所有仓位（测试用）
          - 'test_arbitrage'             #【T09】手动套利扫描
          - 'run_new_stock_info'         #每日 9:35 新股信息推送
          - 'push_strategy'              #计算策略信号并推送到企业微信
          - 'update_stock_pool'          #每周五16:00北京时间更新ETF股票池（5只稳健仓 + 5只激进仓）
          - 'crawl_daily'                #日线数据爬取任务
          - 'crawl_intraday'             #盘中数据爬取任务
          - 'cleanup'                    #数据清理任务

jobs:
  run-new-stock-info:
    if: ${{ contains(github.event.schedule, '35 1') || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'run_new_stock_info') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run strategy
        env:
          TASK: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.task || 'run_new_stock_info' }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TRI_HTM_TOKEN: ${{ secrets.TRI_HTM_TOKEN }}
          TUSHARE_TOKEN: ${{ secrets.TUSHARE_TOKEN }}
          MESSAGE_FOOTER: ${{ secrets.MESSAGE_FOOTER }}
        run: |
          python main.py
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动爬取日线数据 $(date)" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"

  crawl-daily:
    if: ${{ contains(github.event.schedule, '30 7') || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'crawl_daily') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run strategy
        env:
          TASK: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.task || 'crawl_daily' }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TRI_HTM_TOKEN: ${{ secrets.TRI_HTM_TOKEN }}
          TUSHARE_TOKEN: ${{ secrets.TUSHARE_TOKEN }}
          MESSAGE_FOOTER: ${{ secrets.MESSAGE_FOOTER }}
        run: |
          python main.py
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动爬取日线数据 $(date)" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"

  cleanup:
    if: ${{ contains(github.event.schedule, '0 16') || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'cleanup') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run strategy
        env:
          TASK: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.task || 'cleanup' }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          TRI_HTM_TOKEN: ${{ secrets.TRI_HTM_TOKEN }}
          TUSHARE_TOKEN: ${{ secrets.TUSHARE_TOKEN }}
          MESSAGE_FOOTER: ${{ secrets.MESSAGE_FOOTER }}
        run: |
          python main.py
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动清理旧数据 $(date)" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"
