name: ETF Strategy Scheduler

on:
  schedule:
    # 每个交易日 9:31 爬取当天新股申购、新上市股票信息 (北京时间 UTC+8)
    - cron: '31 1 * * 1-5' # UTC 1:31 = 北京时间 9:31
    
    # 每个交易日 9:45 推送新股申购和新上市股票信息 (北京时间 UTC+8)
    - cron: '45 1 * * 1-5' # UTC 1:45 = 北京时间 9:45
    
    # 每个交易日 9:55 爬取当天ETF交易数据 (北京时间 UTC+8)
    - cron: '55 1 * * 1-5' # UTC 1:55 = 北京时间 9:55
    
    # 每个交易日 13:00 套利扫描、股票池策略计算与推送 (北京时间 UTC+8)
    - cron: '0 5 * * 1-5' # UTC 5:00 = 北京时间 13:00
    
    # 每个交易日 16:00 爬取日线数据 (北京时间 UTC+8)
    - cron: '0 8 * * 1-5' # UTC 8:00 = 北京时间 16:00
    
    # 每天 00:00 清理旧数据 (北京时间 UTC+8)
    - cron: '0 16 * * *' # UTC 16:00 = 北京时间 00:00
    
    # 断点续爬任务（每2小时执行一次，仅在非交易时间）
    - cron: '0 */2 * * *' # 每2小时执行一次

  # 允许手动触发
  workflow_dispatch:
    inputs:
      task:
        description: '选择要执行的任务'
        required: true
        type: choice
        options:
          - 'test_message' 				#【T01】手动推送微信消息
          - 'test_new_stock' 			#【T07】手动推送新股信息
          - 'test_new_stock_listings'	#【T08】手动推送新上市交易股票信息
          - 'test_stock_pool' 			#【T04】手动推送当前股票池
          - 'test_execute'				#【T05】手动执行策略并推送结果
          - 'test_reset'					#【T06】手动重置所有仓位（测试用）
          - 'test_arbitrage'				#【T09】手动套利扫描
          - 'crawl_new_stock'			#【T10】手动爬取新股申购和新上市股票信息
          - 'crawl_intraday'				#【T11】手动爬取当天ETF交易数据
          - 'push_new_stock'				#【T12】手动推送新股申购和新上市股票信息
          - 'arbitrage-scan'				#【T13】手动套利扫描
          - 'push_strategy'				#【T14】手动推送策略信号
          - 'crawl_daily'				#【T15】手动爬取日线数据
          - 'cleanup'					#【T16】手动清理旧数据
          - 'resume_crawl'				#【T17】手动断点续爬

jobs:
  # 9:31 AM：爬取当天新股申购、新上市股票信息
  run-crawl-new-stock:
    if: github.event.inputs.task == 'crawl_new_stock' || github.schedule == '31 1 * * 1-5'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run new stock and listing crawl
        env:
          TASK: crawl_new_stock
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          python main.py
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add data/
          git commit -m "自动保存新股数据 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || git pull origin main --rebase && git push origin main

  # 9:45 AM：推送新股申购和新上市股票信息
  run-push-new-stock:
    if: github.event.inputs.task == 'push_new_stock' || github.schedule == '45 1 * * 1-5'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run new stock info push
        env:
          TASK: push_new_stock
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: python main.py

  # 9:55 AM：爬取当天ETF交易数据
  run-crawl-intraday:
    if: github.event.inputs.task == 'crawl_intraday' || github.schedule == '55 1 * * 1-5'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run intraday data crawl
        env:
          TASK: crawl_intraday
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          python main.py
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add data/
          git commit -m "自动保存ETF交易数据 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || git pull origin main --rebase && git push origin main

  # 13:00 PM：套利扫描、股票池策略计算与推送
  run-arbitrage-and-strategy:
    if: github.event.inputs.task == 'arbitrage-scan' || github.event.inputs.task == 'push_strategy' || github.schedule == '0 5 * * 1-5'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run arbitrage scan
        env:
          TASK: arbitrage-scan
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: python main.py
      
      - name: Run strategy push
        env:
          TASK: push_strategy
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: python main.py

  # 16:00 PM：爬取日线数据
  run-crawl-daily:
    if: github.event.inputs.task == 'crawl_daily' || github.schedule == '0 8 * * 1-5'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run daily data crawl
        env:
          TASK: crawl_daily
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          python main.py
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add data/
          git commit -m "自动保存ETF日线数据 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || git pull origin main --rebase && git push origin main

  # 00:00 AM：清理旧数据
  run-cleanup:
    if: github.event.inputs.task == 'cleanup' || github.schedule == '0 16 * * *'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run data cleanup
        env:
          TASK: cleanup
        run: python main.py

  # 断点续爬任务（每2小时执行一次，仅在非交易时间）
  # 检查是否在18:00-23:59 (UTC 10:00-15:59)
  # 检查是否在00:00-09:00 (UTC 16:00-01:00)
  # 判断是否在非交易时间 (18:00-09:00)
  # 提交数据变更到仓库
  resume-crawl:
    if: >-
      github.event.inputs.task == 'resume_crawl' || 
      (
        github.schedule == '0 */2 * * *' && 
        (
          (utc_hour >= 10 && utc_hour <= 15) ||
          (utc_hour >= 16 || utc_hour <= 1)
        )
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Debug info
        run: |
          echo "Current UTC time: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "Current UTC hour: $(date -u '+%H')"
          utc_hour=$(date -u '+%H')
          beijing_hour=$(( (10#$utc_hour + 8) % 24 ))
          echo "Current Beijing time: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "Beijing hour: $beijing_hour"
          
          if (( beijing_hour >= 18 || beijing_hour < 9 )); then
            echo "IN_NON_TRADING_HOURS=true"
            echo "IN_NON_TRADING_HOURS=true" >> $GITHUB_ENV
          else
            echo "IN_NON_TRADING_HOURS=false"
            echo "IN_NON_TRADING_HOURS=false" >> $GITHUB_ENV
          fi
      
      - name: Run resume crawl (only in non-trading hours)
        if: env.IN_NON_TRADING_HOURS == 'true'
        env:
          TASK: resume_crawl
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: |
          python main.py
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动续爬ETF数据 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"
      
      - name: Skip resume crawl (during trading hours)
        if: env.IN_NON_TRADING_HOURS != 'true'
        run: |
          echo "当前为交易时间 (北京时间 09:00-18:00)，跳过断点续爬任务"

  # 测试任务
  run-test-message:
    if: github.event.inputs.task == 'test_message'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run test message
        env:
          TASK: test_message
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: python main.py

  run-test-new-stock:
    if: github.event.inputs.task == 'test_new_stock'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run test new stock
        env:
          TASK: test_new_stock
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: python main.py

  run-test-new-stock-listings:
    if: github.event.inputs.task == 'test_new_stock_listings'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run test new stock listings
        env:
          TASK: test_new_stock_listings
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: python main.py

  run-test-stock-pool:
    if: github.event.inputs.task == 'test_stock_pool'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run test stock pool
        env:
          TASK: test_stock_pool
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: python main.py

  run-test-execute:
    if: github.event.inputs.task == 'test_execute'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run test execute
        env:
          TASK: test_execute
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: python main.py

  run-test-reset:
    if: github.event.inputs.task == 'test_reset'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run test reset
        env:
          TASK: test_reset
        run: python main.py

  run-test-arbitrage:
    if: github.event.inputs.task == 'test_arbitrage'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install akshare baostock
      
      - name: Run test arbitrage
        env:
          TASK: test_arbitrage
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
        run: python main.py
