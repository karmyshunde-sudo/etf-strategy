name: ETF Strategy Scheduler

on:
  schedule:
    # 每个交易日 9:35 推送新股信息 (北京时间 UTC+8)
    - cron: '35 1 * * 1-5' # UTC 1:35 = 北京时间 9:35
    
    # 每个交易日 13:40 推送策略信号
    - cron: '40 5 * * 1-5' # UTC 5:40 = 北京时间 13:40
    
    # 每周五 16:00 更新股票池
    - cron: '0 8 * * 5' # UTC 8:00 = 北京时间 16:00
    
    # 每个交易日 15:30 爬取日线数据
    - cron: '30 7 * * 1-5' # UTC 7:30 = 北京时间 15:30
    
    # 盘中数据爬取 (每30分钟)
    - cron: '35 1-6/1 * * 1-5' # UTC 时间 = 北京时间 - 8
    
    # 每天 00:00 清理旧数据
    - cron: '0 16 * * *' # UTC 16:00 = 北京时间 00:00
    
    # 断点续爬任务（每2小时执行一次，仅在非交易时间）
    - cron: '0 */2 * * *' # 每2小时执行一次

  # 允许手动触发
  workflow_dispatch:
    inputs:
      task:
        description: '选择要执行的任务'
        required: true
        type: choice
        options:
          - 'test_message' 				#【T01】手动推送微信消息
          - 'test_new_stock' 			#【T07】手动推送新股信息
          - 'test_new_stock_listings'	#【T08】手动推送新上市交易股票信息
          - 'test_stock_pool' 			#【T04】手动推送当前股票池
          - 'test_execute'				#【T05】手动执行策略并推送结果
          - 'test_reset'					#【T06】手动重置所有仓位（测试用）
          - 'test_arbitrage'				#【T09】手动套利扫描
          - 'run_new_stock_info'			#每日 9:35 新股信息推送
          - 'push_strategy'				#计算策略信号并推送到企业微信
          - 'update_stock_pool'			#每周五16:00北京时间更新ETF股票池（5只稳健仓 + 5只激进仓）
          - 'crawl_daily'					#日线数据爬取任务
          - 'crawl_intraday'				#盘中数据爬取任务
          - 'cleanup'					#数据清理任务
          - 'arbitrage-scan'             #定时套利扫描
          - 'resume_crawl'               #断点续爬任务

jobs:
  run-new-stock-info:
    if: ${{ contains(github.event.schedule, '35 1 * * 1-5') || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'run_new_stock_info') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Debug info
        run: |
          echo "Event schedule: ${{ github.event.schedule }}"
          echo "Is weekday? $([ $(date -u '+%u') -le 5 ] && echo 'Yes' || echo 'No')"
      
      - name: Run strategy
        env:
          TASK: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.task || 'run_new_stock_info' }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          MESSAGE_FOOTER: ${{ secrets.MESSAGE_FOOTER }}
        run: |
          python main.py
          
          # 提交数据变更到仓库
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动更新新股数据 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"
      
      - name: Verify execution
        run: |
          echo "New stock info execution completed successfully!"

  push-strategy:
    if: ${{ contains(github.event.schedule, '40 5') || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'push_strategy') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Debug info
        run: |
          echo "Event schedule: ${{ github.event.schedule }}"
          echo "Is weekday? $([ $(date -u '+%u') -le 5 ] && echo 'Yes' || echo 'No')"
      
      - name: Run strategy
        env:
          TASK: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.task || 'push_strategy' }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          MESSAGE_FOOTER: ${{ secrets.MESSAGE_FOOTER }}
        run: |
          python main.py
          
          # 提交数据变更到仓库
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动更新策略数据 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"
      
      - name: Verify execution
        run: |
          echo "Strategy push execution completed successfully!"

  update-stock-pool:
    if: ${{ (github.event.schedule == '0 8 * * 5' && github.run_attempt == 1) || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'update_stock_pool') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Debug info
        run: |
          echo "Event schedule: ${{ github.event.schedule }}"
          echo "Today is Friday? $([ $(date -u '+%u') -eq 5 ] && echo 'Yes' || echo 'No')"
      
      - name: Run strategy
        env:
          TASK: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.task || 'update_stock_pool' }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          MESSAGE_FOOTER: ${{ secrets.MESSAGE_FOOTER }}
        run: |
          python main.py
          
          # 提交数据变更到仓库
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动更新股票池 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"
      
      - name: Verify execution
        run: |
          echo "Stock pool update execution completed successfully!"

  crawl-daily:
    if: ${{ contains(github.event.schedule, '30 7') || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'crawl_daily') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Debug info
        run: |
          echo "Event schedule: ${{ github.event.schedule }}"
          echo "Is weekday? $([ $(date -u '+%u') -le 5 ] && echo 'Yes' || echo 'No')"
      
      - name: Run strategy
        env:
          TASK: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.task || 'crawl_daily' }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          MESSAGE_FOOTER: ${{ secrets.MESSAGE_FOOTER }}
        run: |
          python main.py
          
          # 提交数据变更到仓库
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动爬取日线数据 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"
      
      - name: Verify execution
        run: |
          echo "Daily crawl execution completed successfully!"

  crawl-intraday:
    if: ${{ contains(github.event.schedule, '35') || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'crawl_intraday') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Debug info
        run: |
          echo "Event schedule: ${{ github.event.schedule }}"
          echo "Is weekday? $([ $(date -u '+%u') -le 5 ] && echo 'Yes' || echo 'No')"
      
      - name: Run strategy
        env:
          TASK: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.task || 'crawl_intraday' }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          MESSAGE_FOOTER: ${{ secrets.MESSAGE_FOOTER }}
        run: |
          python main.py
          
          # 提交数据变更到仓库
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动爬取盘中数据 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"
      
      - name: Verify execution
        run: |
          echo "Intraday crawl execution completed successfully!"

  arbitrage-scan:
    if: ${{ contains(github.event.schedule, '35') || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'arbitrage-scan') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Debug info
        run: |
          echo "Arbitrage scan task triggered at $(date -u)"
      
      - name: Run arbitrage scan
        env:
          TASK: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.task || 'arbitrage-scan' }}
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          MESSAGE_FOOTER: ${{ secrets.MESSAGE_FOOTER }}
        run: |
          python main.py
          
          # 提交数据变更到仓库
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动扫描套利机会 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"
      
      - name: Verify execution
        run: |
          echo "Arbitrage scan execution completed successfully!"

  resume-crawl:
    if: ${{ github.event.inputs.task == 'resume_crawl' || (github.event.schedule == '0 */2 * * *' && (utc_hour >= 10 && utc_hour <= 15 || utc_hour >= 16 || utc_hour <= 1)) }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Debug info
        run: |
          echo "Current UTC time: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "Current UTC hour: $(date -u '+%H')"
          utc_hour=$(date -u '+%H')
          beijing_hour=$(( (10#$utc_hour + 8) % 24 ))
          echo "Current Beijing time: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "Beijing hour: $beijing_hour"
          
          # 判断是否在非交易时间 (18:00-09:00)
          if (( beijing_hour >= 18 || beijing_hour < 9 )); then
            echo "IN_NON_TRADING_HOURS=true"
            echo "IN_NON_TRADING_HOURS=true" >> $GITHUB_ENV
          else
            echo "IN_NON_TRADING_HOURS=false"
            echo "IN_NON_TRADING_HOURS=false" >> $GITHUB_ENV
          fi
      
      - name: Run resume crawl (only in non-trading hours)
        if: env.IN_NON_TRADING_HOURS == 'true'
        env:
          TASK: resume_crawl
          WECOM_WEBHOOK: ${{ secrets.WECOM_WEBHOOK }}
          MESSAGE_FOOTER: ${{ secrets.MESSAGE_FOOTER }}
        run: |
          python main.py
          
          # 提交数据变更到仓库
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动续爬ETF数据 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"
      
      - name: Skip resume crawl (during trading hours)
        if: env.IN_NON_TRADING_HOURS != 'true'
        run: |
          echo "当前为交易时间 (北京时间 09:00-18:00)，跳过断点续爬任务"

  cleanup:
    if: ${{ github.event.schedule == '0 16 * * *' || (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'cleanup') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Debug info
        run: |
          echo "Cleanup task triggered at $(date -u)"
      
      - name: Run strategy
        env:
          TASK: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.task || 'cleanup' }}
        run: |
          python main.py
          
          # 提交数据变更到仓库
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/
          git commit -m "自动清理旧数据 $(date +'%Y-%m-%d %H:%M')" || echo "No changes to commit"
          git push origin main || echo "Failed to push changes"
      
      - name: Verify execution
        run: |
          echo "Cleanup execution completed successfully!"
